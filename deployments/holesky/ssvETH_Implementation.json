{
  "address": "0xBd01f1F474584F8BaE07E53bB763378e9566D2e6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_asset",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "EIP712DomainChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "WhitelistAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "WhitelistRemoved",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "_addWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_close",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_open",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "_removeWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IiToken",
          "name": "_iToken",
          "type": "address"
        }
      ],
      "name": "_setLending",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "asset",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetConsumed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetQuota",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_ethAmount",
          "type": "uint256"
        }
      ],
      "name": "claimETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_mintPaused",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eip712Domain",
      "outputs": [
        {
          "internalType": "bytes1",
          "name": "fields",
          "type": "bytes1"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "version",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "verifyingContract",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "extensions",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ethAmount",
          "type": "uint256"
        }
      ],
      "name": "getIutputAsset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_assetAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_assetAmount",
          "type": "uint256"
        }
      ],
      "name": "getIutputEth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_ethAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ethAmount",
          "type": "uint256"
        }
      ],
      "name": "getOutputAsset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_assetAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_assetAmount",
          "type": "uint256"
        }
      ],
      "name": "getOutputEth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_ethAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUnderlyingPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "iToken",
      "outputs": [
        {
          "internalType": "contract IiToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "isWhitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lendingCash",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "limitOfDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_depositLimit",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAsset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "unwrapToAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "unwrapToAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelists",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_whitelists",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_iTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "withdrawAndUnwrapToAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_iTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "withdrawAndUnwrapToAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_redeemPaused",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawUnderlyingAndUnwrapToAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawUnderlyingAndUnwrapToAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "wrap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrapAndDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "wrapAndDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x793706ac10461801342d522812b790d7754a46627be13ddedad331067afa46da",
  "receipt": {
    "to": null,
    "from": "0xF4Db6BB2bd78b42e3cFbA47B667ff8A2CebB570D",
    "contractAddress": "0xBd01f1F474584F8BaE07E53bB763378e9566D2e6",
    "transactionIndex": 23,
    "gasUsed": "3565981",
    "logsBloom": "0x
    "blockHash": "0x044e2ca79b43e276fe281bd130027bf6d3a453ed24bfaed4a52d63e4df8804ad",
    "transactionHash": "0x793706ac10461801342d522812b790d7754a46627be13ddedad331067afa46da",
    "logs": [
      {
        "transactionIndex": 23,
        "blockNumber": 1227468,
        "transactionHash": "0x793706ac10461801342d522812b790d7754a46627be13ddedad331067afa46da",
        "address": "0xBd01f1F474584F8BaE07E53bB763378e9566D2e6",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 34,
        "blockHash": "0x044e2ca79b43e276fe281bd130027bf6d3a453ed24bfaed4a52d63e4df8804ad"
      }
    ],
    "blockNumber": 1227468,
    "cumulativeGasUsed": "7073298",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x92a38d33007896DbE401eF1Ac4986D811874C8B7"
  ],
  "numDeployments": 1,
  "solcInputHash": "a54e8f8951cc89282681272b337ee4ff",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_asset\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"_addWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_close\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_open\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"_removeWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IiToken\",\"name\":\"_iToken\",\"type\":\"address\"}],\"name\":\"_setLending\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetConsumed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetQuota\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ethAmount\",\"type\":\"uint256\"}],\"name\":\"claimETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_mintPaused\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ethAmount\",\"type\":\"uint256\"}],\"name\":\"getIutputAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_assetAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_assetAmount\",\"type\":\"uint256\"}],\"name\":\"getIutputEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_ethAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ethAmount\",\"type\":\"uint256\"}],\"name\":\"getOutputAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_assetAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_assetAmount\",\"type\":\"uint256\"}],\"name\":\"getOutputEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_ethAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnderlyingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"iToken\",\"outputs\":[{\"internalType\":\"contract IiToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lendingCash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitOfDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositLimit\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unwrapToAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unwrapToAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelists\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_whitelists\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_iTokenAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawAndUnwrapToAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_iTokenAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawAndUnwrapToAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_redeemPaused\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawUnderlyingAndUnwrapToAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawUnderlyingAndUnwrapToAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"wrap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrapAndDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"wrapAndDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"dForce engineer\",\"details\":\"Contains the main logic for ssvETH token functionality.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"See {IERC20Permit-DOMAIN_SEPARATOR}.\"},\"_addWhitelist(address)\":{\"details\":\"Add a new account into the whitelist.\"},\"_close()\":{\"details\":\"Pauses the contract.\"},\"_open()\":{\"details\":\"Unpauses the contract.\"},\"_removeWhitelist(address)\":{\"details\":\"Remove an exist account from the whitelist.\"},\"_setLending(address)\":{\"details\":\"Sets the lending parameters for the contract.\",\"params\":{\"_iToken\":\"The iToken to be set for lending.\"}},\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"asset()\":{\"details\":\"External function to retrieve the asset token address.\",\"returns\":{\"_0\":\"The asset token address.\"}},\"assetConsumed()\":{\"details\":\"External function to retrieve the amount of asset consumed.\",\"returns\":{\"_0\":\"The amount of asset consumed.\"}},\"assetQuota()\":{\"details\":\"External function to retrieve the remaining asset quota available for consumption.\",\"returns\":{\"_0\":\"_assetQuota The remaining asset quota.\"}},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"claimETH(address,uint256)\":{\"details\":\"Claims ETH and transfers it to the specified address.\",\"params\":{\"_ethAmount\":\"The amount of ETH to claim.\",\"_to\":\"The address to receive the ETH.\"}},\"constructor\":{\"details\":\"Constructor function for ssvETH token.\",\"params\":{\"_asset\":\"The underlying asset for the ssvETH token.\"}},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"depositStatus()\":{\"details\":\"Returns the deposit status of the pool.\"},\"eip712Domain()\":{\"details\":\"See {EIP-5267}. _Available since v4.9._\"},\"exchangeRate()\":{\"details\":\"External function to retrieve the exchange rate between asset and Ether.\",\"returns\":{\"_0\":\"The current exchange rate.\"}},\"getIutputAsset(uint256)\":{\"details\":\"External function to get the amount of asset to input based on the given Ether amount.\",\"params\":{\"_ethAmount\":\"The amount of Ether to convert to asset.\"},\"returns\":{\"_assetAmount\":\"The calculated amount of asset to input.\"}},\"getIutputEth(uint256)\":{\"details\":\"External function to get the amount of Ether to input based on the given asset amount.\",\"params\":{\"_assetAmount\":\"The amount of the asset to convert to Ether.\"},\"returns\":{\"_ethAmount\":\"The calculated amount of Ether to input.\"}},\"getOutputAsset(uint256)\":{\"details\":\"External function to get the amount of asset to output based on the given Ether amount.\",\"params\":{\"_ethAmount\":\"The amount of Ether to convert to asset.\"},\"returns\":{\"_assetAmount\":\"The calculated amount of asset to output.\"}},\"getOutputEth(uint256)\":{\"details\":\"External function to get the amount of Ether to output based on the given asset amount.\",\"params\":{\"_assetAmount\":\"The amount of the asset to convert from Ether.\"},\"returns\":{\"_ethAmount\":\"The calculated amount of Ether to output.\"}},\"iToken()\":{\"details\":\"Returns the underlying asset of the pool.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"initialize(string,string)\":{\"details\":\"Initializes the contract with required initializations for Ownable, Pausable, ERC20, and ERC20 Permit.\"},\"isWhitelist(address)\":{\"details\":\"Checks if the account is whitelisted.\",\"params\":{\"_account\":\"The address to check.\"},\"returns\":{\"_0\":\"True if the account is whitelisted, false otherwise.\"}},\"lendingCash()\":{\"details\":\"Returns the available cash (liquidity) in the pool.\",\"returns\":{\"_0\":\"The amount of available cash in the pool.\"}},\"limitOfDeposit()\":{\"details\":\"Returns the remaining deposit limit of the pool.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"See {IERC20Permit-nonces}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"See {IERC20Permit-permit}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalAsset()\":{\"details\":\"External function to retrieve the total amount of the asset held by the contract.\",\"returns\":{\"_0\":\"The total amount of the asset held by the contract.\"}},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"},\"unwrapToAsset(address,uint256)\":{\"details\":\"Unwraps assets to the specified amount and transfers them to the specified address.\",\"params\":{\"_amount\":\"The amount of assets to unwrap and transfer.\",\"_to\":\"The address to receive the unwrapped assets.\"}},\"unwrapToAsset(uint256)\":{\"details\":\"Unwraps assets to the specified amount and transfers them to the sender.\",\"params\":{\"_amount\":\"The amount of assets to unwrap and transfer.\"}},\"whitelists()\":{\"returns\":{\"_whitelists\":\"The list of account addresses\"}},\"withdrawAndUnwrapToAsset(address,uint256)\":{\"details\":\"Redeems iToken assets and unwraps them to the corresponding amount, transferring them to the specified address.\",\"params\":{\"_iTokenAmount\":\"The amount of iToken assets to redeem and unwrap.\",\"_to\":\"The address to receive the unwrapped assets.\"}},\"withdrawAndUnwrapToAsset(uint256)\":{\"details\":\"Redeems iToken assets and unwraps them to the corresponding amount, transferring them to the sender.\",\"params\":{\"_iTokenAmount\":\"The amount of iToken assets to redeem and unwrap.\"}},\"withdrawStatus()\":{\"details\":\"Returns the withdraw status of the pool.\"},\"withdrawUnderlyingAndUnwrapToAsset(address,uint256)\":{\"details\":\"Redeems underlying assets and unwraps them to the specified amount, transferring them to the specified address.\",\"params\":{\"_amount\":\"The amount of underlying assets to redeem and unwrap.\",\"_to\":\"The address to receive the unwrapped assets.\"}},\"withdrawUnderlyingAndUnwrapToAsset(uint256)\":{\"details\":\"Redeems underlying assets and unwraps them to the specified amount, transferring them to the sender.\",\"params\":{\"_amount\":\"The amount of underlying assets to redeem and unwrap.\"}},\"wrap()\":{\"details\":\"Wraps ETH into assets and returns the corresponding amount of assets to the sender.\"},\"wrap(address)\":{\"details\":\"Wraps ETH into assets and returns the corresponding amount of assets to the specified address.\",\"params\":{\"_to\":\"The address to receive the wrapped assets.\"}},\"wrapAndDeposit()\":{\"details\":\"Wraps ETH into assets, mints the corresponding amount of assets to the contract, and deposits them to the sender.\"},\"wrapAndDeposit(address)\":{\"details\":\"Wraps ETH into assets, mints the corresponding amount of assets to the contract, and deposits them to the specified address.\",\"params\":{\"_to\":\"The address to receive the minted assets.\"}}},\"title\":\"ssvETH\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"_close()\":{\"notice\":\"This function can only be called by the pause guardian.\"},\"_open()\":{\"notice\":\"This function can only be called by the contract owner.\"},\"_setLending(address)\":{\"notice\":\"Only the contract owner can call this function.\"},\"claimETH(address,uint256)\":{\"notice\":\"Only addresses in the whitelist can call this function.\"},\"initialize(string,string)\":{\"notice\":\"Initializes the ssvETH token with the provided name and symbol.\"},\"whitelists()\":{\"notice\":\"Return all whitelists\"}},\"notice\":\"Implements functionality for ssvETH token.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/ssvETH.sol\":\"ssvETH\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OwnableUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\\n    function __Ownable2Step_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\\n    }\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x84efb8889801b0ac817324aff6acc691d07bbee816b671817132911d287a8c63\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC5267Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC5267Upgradeable {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0xe562dab443278837fa50faddb76743399e942181881db8dccaea3bd1712994db\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xd14a627157b9a411d2410713e5dd3a377e9064bd5c194a90748bbf27ea625784\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/ERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/EIP712Upgradeable.sol\\\";\\nimport \\\"../../../utils/CountersUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 51\\n */\\nabstract contract ERC20PermitUpgradeable is Initializable, ERC20Upgradeable, IERC20PermitUpgradeable, EIP712Upgradeable {\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    mapping(address => CountersUpgradeable.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private constant _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    /**\\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\\n     * to reserve a slot.\\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    function __ERC20Permit_init(string memory name) internal onlyInitializing {\\n        __EIP712_init_unchained(name, \\\"1\\\");\\n    }\\n\\n    function __ERC20Permit_init_unchained(string memory) internal onlyInitializing {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSAUpgradeable.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        CountersUpgradeable.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x3988ac03e4819acd4b5adf41de7d43c1471748ddc2d73d2c7aca1e3827402e5d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xd60f939a3ca0199014d079b4dd66aa757954334947d81eb5c1d35d7a83061ab3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0xa014f65d84b02827055d99993ccdbfb4b56b2c9e91eb278d82a93330659d06e4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC5267Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 52\\n */\\nabstract contract EIP712Upgradeable is Initializable, IERC5267Upgradeable {\\n    bytes32 private constant _TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @custom:oz-renamed-from _HASHED_NAME\\n    bytes32 private _hashedName;\\n    /// @custom:oz-renamed-from _HASHED_VERSION\\n    bytes32 private _hashedVersion;\\n\\n    string private _name;\\n    string private _version;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        _name = name;\\n        _version = version;\\n\\n        // Reset prior values in storage if upgrading\\n        _hashedName = 0;\\n        _hashedVersion = 0;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator();\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash(), block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {EIP-5267}.\\n     *\\n     * _Available since v4.9._\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        // If the hashed name and version in storage are non-zero, the contract hasn't been properly initialized\\n        // and the EIP712 domain is not reliable, as it will be missing name and version.\\n        require(_hashedName == 0 && _hashedVersion == 0, \\\"EIP712: Uninitialized\\\");\\n\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712Name() internal virtual view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712Version() internal virtual view returns (string memory) {\\n        return _version;\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Name` instead.\\n     */\\n    function _EIP712NameHash() internal view returns (bytes32) {\\n        string memory name = _EIP712Name();\\n        if (bytes(name).length > 0) {\\n            return keccak256(bytes(name));\\n        } else {\\n            // If the name is empty, the contract may have been upgraded without initializing the new storage.\\n            // We return the name hash in storage if non-zero, otherwise we assume the name is empty by design.\\n            bytes32 hashedName = _hashedName;\\n            if (hashedName != 0) {\\n                return hashedName;\\n            } else {\\n                return keccak256(\\\"\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Version` instead.\\n     */\\n    function _EIP712VersionHash() internal view returns (bytes32) {\\n        string memory version = _EIP712Version();\\n        if (bytes(version).length > 0) {\\n            return keccak256(bytes(version));\\n        } else {\\n            // If the version is empty, the contract may have been upgraded without initializing the new storage.\\n            // We return the version hash in storage if non-zero, otherwise we assume the version is empty by design.\\n            bytes32 hashedVersion = _hashedVersion;\\n            if (hashedVersion != 0) {\\n                return hashedVersion;\\n            } else {\\n                return keccak256(\\\"\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[48] private __gap;\\n}\\n\",\"keccak256\":\"0xeb8d6be406a373771724922eb41b5d593bc8e2dc705daa22cd1145cfc8f5a3a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC4626.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\nimport \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n *\\n * _Available since v4.7._\\n */\\ninterface IERC4626 is IERC20, IERC20Metadata {\\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\\n}\\n\",\"keccak256\":\"0x5a173dcd1c1f0074e4df6a9cdab3257e17f2e64f7b8f30ca9e17a8c5ea250e1c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"src/interface/ILending.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IController {\\n\\tfunction priceOracle() external view returns (address);\\n\\n\\tfunction markets(address _iToken) external view returns (uint256, uint256, uint256, uint256, bool, bool, bool);\\n}\\n\\ninterface IPriceOracle {\\n\\tfunction getUnderlyingPrice(address _iToken) external returns (uint256);\\n\\n\\tfunction getUnderlyingPriceAndStatus(address _iToken) external returns (uint256, bool);\\n}\\n\\ninterface IiToken is IERC20 {\\n\\tfunction symbol() external view returns (string memory);\\n\\n\\tfunction isSupported() external view returns (bool);\\n\\n\\tfunction isiToken() external view returns (bool);\\n\\n\\tfunction underlying() external view returns (address);\\n\\n\\tfunction controller() external view returns (address);\\n\\n\\tfunction exchangeRateCurrent() external returns (uint256);\\n\\n\\tfunction getCash() external view returns (uint256);\\n\\n\\tfunction balanceOfUnderlying(address _account) external returns (uint256);\\n\\n\\tfunction mint(address _recipient, uint256 _mintAmount) external;\\n\\n\\tfunction redeem(address _from, uint256 _redeemTokens) external;\\n\\n\\tfunction redeemUnderlying(address _from, uint256 _redeemAmount) external;\\n}\\n\\ninterface IiETH {\\n\\tfunction symbol() external view returns (string memory);\\n\\n\\tfunction isSupported() external view returns (bool);\\n\\n\\tfunction isiToken() external view returns (bool);\\n\\n\\tfunction underlying() external view returns (address);\\n\\n\\tfunction controller() external view returns (address);\\n\\n\\tfunction exchangeRateCurrent() external returns (uint256);\\n\\n\\tfunction getCash() external view returns (uint256);\\n\\n\\tfunction balanceOfUnderlying(address _account) external returns (uint256);\\n\\n\\tfunction mint(address _recipient) external payable;\\n\\n\\tfunction redeem(address _from, uint256 _redeemTokens) external;\\n\\n\\tfunction redeemUnderlying(address _from, uint256 _redeemAmount) external;\\n}\\n\",\"keccak256\":\"0x103058b57cd6b1a5f35518df912a02fce021cd9e46f628ca95b4c794a261c9b4\",\"license\":\"MIT\"},\"src/library/Whitelists.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @title dForce's whitelists module\\n * @author dForce engineer\\n */\\nabstract contract Whitelists {\\n\\tusing EnumerableSet for EnumerableSet.AddressSet;\\n\\n\\t/// @dev EnumerableSet of whitelists\\n\\tEnumerableSet.AddressSet internal whitelists_;\\n\\n\\t/**\\n\\t * @dev Emitted when `account` is added as `whitelists`.\\n\\t */\\n\\tevent WhitelistAdded(address account);\\n\\n\\t/**\\n\\t * @dev Emitted when `account` is removed from `whitelists`.\\n\\t */\\n\\tevent WhitelistRemoved(address account);\\n\\n\\t/**\\n\\t * @dev Throws if called by any account other than the whitelists.\\n\\t */\\n\\tmodifier onlyWhitelist() {\\n\\t\\trequire(isWhitelist(msg.sender), \\\"onlyWhitelist: caller is not in the whitelist\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Add `account` into whitelists.\\n\\t * If `account` have not been a account, emits a `WhitelistAdded` event.\\n\\t *\\n\\t * @param _account The account to add\\n\\t */\\n\\tfunction _addWhitelistInternal(address _account) internal virtual {\\n\\t\\trequire(_account != address(0), \\\"_addWhitelistInternal: _account the zero address\\\");\\n\\t\\trequire(whitelists_.add(_account), \\\"_addWhitelistInternal: _account has been added\\\");\\n\\t\\temit WhitelistAdded(_account);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Remove `account` from whitelists.\\n\\t * If `account` is a account, emits a `WhitelistRemoved` event.\\n\\t *\\n\\t * @param _account The account to remove\\n\\t */\\n\\tfunction _removeWhitelistInternal(address _account) internal virtual {\\n\\t\\trequire(whitelists_.remove(_account), \\\"_removeWhitelistInternal: _account has been removed\\\");\\n\\t\\temit WhitelistRemoved(_account);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Return all whitelists\\n\\t * @return _whitelists The list of account addresses\\n\\t */\\n\\tfunction whitelists() public view returns (address[] memory _whitelists) {\\n\\t\\t_whitelists = whitelists_.values();\\n\\t}\\n\\n\\t/**\\n\\t * @dev Check if address is account\\n\\t * @param _account The address to check\\n\\t * @return Is account boolean, true: is the account; false: not the account\\n\\t */\\n\\tfunction isWhitelist(address _account) public view virtual returns (bool) {\\n\\t\\treturn whitelists_.contains(_account);\\n\\t}\\n}\\n\",\"keccak256\":\"0xb07e78c87d184308f19be62a30d6892f397d57a33fadbba82523a063dc153382\",\"license\":\"MIT\"},\"src/model/AssetModel.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title Asset Model Contract\\n * @notice This contract defines the basic structure for asset models.\\n * @dev Abstract contract defining the Asset Model.\\n * @author dForce engineer\\n */\\nabstract contract AssetModel {\\n\\t/**\\n\\t * @dev The internal immutable IERC20 ASSET token.\\n\\t */\\n\\tIERC20 internal immutable ASSET;\\n\\n\\t/**\\n\\t * @dev Constructor to set the ASSET token.\\n\\t * @param _asset The IERC20 token to be set as ASSET.\\n\\t */\\n\\tconstructor(IERC20 _asset) {\\n\\t\\tASSET = _asset;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Calculates the amount of Ether to input based on the given asset amount.\\n\\t * @param _assetAmount The amount of the asset to convert to Ether.\\n\\t * @return _ethAmount The calculated amount of Ether to input.\\n\\t */\\n\\tfunction _calcIutputEth(uint256 _assetAmount) internal view virtual returns (uint256 _ethAmount) {\\n\\t\\tuint256 _ethExchangeRate = _exchangeRate();\\n\\t\\t_ethAmount = ((_assetAmount * 1 ether) + (_ethExchangeRate - 1)) / _ethExchangeRate;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Calculates the amount of Ether to output based on the given asset amount.\\n\\t * @param _assetAmount The amount of the asset to convert from Ether.\\n\\t * @return _ethAmount The calculated amount of Ether to output.\\n\\t */\\n\\tfunction _calcOutputEth(uint256 _assetAmount) internal view virtual returns (uint256 _ethAmount) {\\n\\t\\t_ethAmount = (_assetAmount * 1 ether) / _exchangeRate();\\n\\t}\\n\\n\\t/**\\n\\t * @dev Calculates the amount of asset to input based on the given Ether amount.\\n\\t * @param _ethAmount The amount of Ether to convert to asset.\\n\\t * @return _assetAmount The calculated amount of asset to input.\\n\\t */\\n\\tfunction _calcIutputAsset(uint256 _ethAmount) internal view virtual returns (uint256 _assetAmount) {\\n\\t\\t_assetAmount = ((_ethAmount * _exchangeRate()) + (1 ether - 1)) / 1 ether;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Calculates the amount of asset to output based on the given Ether amount.\\n\\t * @param _ethAmount The amount of Ether to convert from asset.\\n\\t * @return _assetAmount The calculated amount of asset to output.\\n\\t */\\n\\tfunction _calcOutputAsset(uint256 _ethAmount) internal view virtual returns (uint256 _assetAmount) {\\n\\t\\t_assetAmount = (_ethAmount * _exchangeRate()) / 1 ether;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Retrieves the exchange rate between asset and Ether.\\n\\t * @return The current exchange rate.\\n\\t */\\n\\tfunction _exchangeRate() internal view virtual returns (uint256);\\n\\n\\t/**\\n\\t * @dev Internal function to retrieve the amount of asset consumed.\\n\\t */\\n\\tfunction _assetConsumedInternal() internal view virtual returns (uint256);\\n\\n\\t/**\\n\\t * @dev Internal function to calculate the remaining asset quota available for consumption.\\n\\t * @return _assetQuota The remaining asset quota.\\n\\t */\\n\\tfunction _assetQuotaInternal() internal view virtual returns (uint256 _assetQuota) {\\n\\t\\tuint256 _assetAmount = ASSET.balanceOf(address(this));\\n\\t\\tuint256 _consumed = _assetConsumedInternal();\\n\\t\\tif (_assetAmount > _consumed) _assetQuota = _assetAmount - _consumed;\\n\\t}\\n\\n\\t/**\\n\\t * @dev External function to get the amount of Ether to input based on the given asset amount.\\n\\t * @param _assetAmount The amount of the asset to convert to Ether.\\n\\t * @return _ethAmount The calculated amount of Ether to input.\\n\\t */\\n\\tfunction getIutputEth(uint256 _assetAmount) external view returns (uint256 _ethAmount) {\\n\\t\\t_ethAmount = _calcIutputEth(_assetAmount);\\n\\t}\\n\\n\\t/**\\n\\t * @dev External function to get the amount of Ether to output based on the given asset amount.\\n\\t * @param _assetAmount The amount of the asset to convert from Ether.\\n\\t * @return _ethAmount The calculated amount of Ether to output.\\n\\t */\\n\\tfunction getOutputEth(uint256 _assetAmount) external view returns (uint256 _ethAmount) {\\n\\t\\t_ethAmount = _calcOutputEth(_assetAmount);\\n\\t}\\n\\n\\t/**\\n\\t * @dev External function to get the amount of asset to input based on the given Ether amount.\\n\\t * @param _ethAmount The amount of Ether to convert to asset.\\n\\t * @return _assetAmount The calculated amount of asset to input.\\n\\t */\\n\\tfunction getIutputAsset(uint256 _ethAmount) external view returns (uint256 _assetAmount) {\\n\\t\\t_assetAmount = _calcIutputAsset(_ethAmount);\\n\\t}\\n\\n\\t/**\\n\\t * @dev External function to get the amount of asset to output based on the given Ether amount.\\n\\t * @param _ethAmount The amount of Ether to convert to asset.\\n\\t * @return _assetAmount The calculated amount of asset to output.\\n\\t */\\n\\tfunction getOutputAsset(uint256 _ethAmount) external view returns (uint256 _assetAmount) {\\n\\t\\t_assetAmount = _calcOutputAsset(_ethAmount);\\n\\t}\\n\\n\\t/**\\n\\t * @dev External function to retrieve the exchange rate between asset and Ether.\\n\\t * @return The current exchange rate.\\n\\t */\\n\\tfunction exchangeRate() external view returns (uint256) {\\n\\t\\treturn _exchangeRate();\\n\\t}\\n\\n\\t/**\\n\\t * @dev External function to retrieve the amount of asset consumed.\\n\\t * @return The amount of asset consumed.\\n\\t */\\n\\tfunction assetConsumed() external view returns (uint256) {\\n\\t\\treturn _assetConsumedInternal();\\n\\t}\\n\\n\\t/**\\n\\t * @dev External function to retrieve the remaining asset quota available for consumption.\\n\\t * @return _assetQuota The remaining asset quota.\\n\\t */\\n\\tfunction assetQuota() external view returns (uint256) {\\n\\t\\treturn _assetQuotaInternal();\\n\\t}\\n\\n\\t/**\\n\\t * @dev External function to retrieve the total amount of the asset held by the contract.\\n\\t * @return The total amount of the asset held by the contract.\\n\\t */\\n\\tfunction totalAsset() external view returns (uint256) {\\n\\t\\treturn ASSET.balanceOf(address(this));\\n\\t}\\n\\n\\t/**\\n\\t * @dev External function to retrieve the asset token address.\\n\\t * @return The asset token address.\\n\\t */\\n\\tfunction asset() external view returns (IERC20) {\\n\\t\\treturn ASSET;\\n\\t}\\n}\\n\",\"keccak256\":\"0x578268ffad60cbaeefb730f6bd3bcaacbed5950397514034416879bf5a3aceeb\",\"license\":\"MIT\"},\"src/model/LendingModel.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"../interface/ILending.sol\\\";\\n\\n/**\\n * @title Lending Model Contract\\n * @notice Abstract contract for lending operations\\n * @dev Contains functions for setting internal lending parameters and getting underlying price\\n * @author dForce engineer\\n */\\nabstract contract LendingModel {\\n\\tIiToken internal iToken_;\\n\\n\\t/**\\n\\t * @dev Sets the internal lending parameters for the given iToken.\\n\\t * @param _iToken The iToken to set as the internal lending parameter.\\n\\t */\\n\\tfunction _setLendingInternal(IiToken _iToken) internal virtual {\\n\\t\\trequire(_iToken.isiToken(), \\\"_setLendingInternal: _iToken is invalid\\\");\\n\\t\\tiToken_ = _iToken;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Retrieves the underlying price of the iToken.\\n\\t * @return The underlying price of the iToken.\\n\\t */\\n\\tfunction _getUnderlyingPrice() internal returns (uint256) {\\n\\t\\t(uint256 _price, bool _isPriceValid) = IPriceOracle(IController(iToken_.controller()).priceOracle())\\n\\t\\t\\t.getUnderlyingPriceAndStatus(address(iToken_));\\n\\t\\trequire(_price > 0 && _isPriceValid, \\\"getUnderlyingPrice: price is invalid\\\");\\n\\t\\treturn _price;\\n\\t}\\n\\t/**\\n\\t * @dev Returns the available cash (liquidity) in the pool.\\n\\t * @return The amount of available cash in the pool.\\n\\t */\\n\\tfunction lendingCash() external view returns (uint256) {\\n\\t\\treturn iToken_.getCash();\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the remaining deposit limit of the pool.\\n\\t */\\n\\tfunction limitOfDeposit() external returns (uint256 _depositLimit) {\\n\\t\\t(, , , uint256 _supplyCapacity, , , ) = IController(iToken_.controller()).markets(address(iToken_));\\n\\n\\t\\tuint256 _totalUnderlying = (iToken_.totalSupply() * iToken_.exchangeRateCurrent()) / 1 ether;\\n\\n\\t\\tif (_supplyCapacity > _totalUnderlying) _depositLimit = _supplyCapacity - _totalUnderlying;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the deposit status of the pool.\\n\\t */\\n\\tfunction depositStatus() external view returns (bool _mintPaused) {\\n\\t\\t(, , , , _mintPaused, , ) = IController(iToken_.controller()).markets(address(iToken_));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the withdraw status of the pool.\\n\\t */\\n\\tfunction withdrawStatus() external view returns (bool _redeemPaused) {\\n\\t\\t(, , , , , _redeemPaused, ) = IController(iToken_.controller()).markets(address(iToken_));\\n\\t}\\n\\n\\tfunction getUnderlyingPrice() external returns (uint256) {\\n\\t\\treturn _getUnderlyingPrice();\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the underlying asset of the pool.\\n\\t */\\n\\tfunction iToken() external view returns (IiToken) {\\n\\t\\treturn iToken_;\\n\\t}\\n}\\n\",\"keccak256\":\"0xf252e8b1f0cd766e0bae827dfaf7f8fec889ab4dbacb3613949cf7e48bdebdc6\",\"license\":\"MIT\"},\"src/ssvETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC4626.sol\\\";\\n\\nimport \\\"./library/Whitelists.sol\\\";\\nimport \\\"./model/AssetModel.sol\\\";\\nimport \\\"./model/LendingModel.sol\\\";\\n\\n/**\\n * @title ssvETH\\n * @notice Implements functionality for ssvETH token.\\n * @dev Contains the main logic for ssvETH token functionality.\\n * @author dForce engineer\\n */\\ncontract ssvETH is\\n\\tOwnable2StepUpgradeable,\\n\\tPausableUpgradeable,\\n\\tERC20PermitUpgradeable,\\n\\tWhitelists,\\n\\tAssetModel,\\n\\tLendingModel\\n{\\n\\tusing Address for address;\\n\\tusing SafeERC20 for IERC20;\\n\\n\\t/**\\n\\t * @dev Constructor function for ssvETH token.\\n\\t * @param _asset The underlying asset for the ssvETH token.\\n\\t */\\n\\tconstructor(IERC20 _asset) AssetModel(_asset) {\\n\\t\\t_disableInitializers();\\n\\t}\\n\\n\\t/**\\n\\t * @dev Fallback function to receive Ether.\\n\\t */\\n\\treceive() external payable {}\\n\\n\\t/**\\n\\t * @notice Initializes the ssvETH token with the provided name and symbol.\\n\\t * @dev Initializes the contract with required initializations for Ownable, Pausable, ERC20, and ERC20 Permit.\\n\\t */\\n\\tfunction initialize(string memory _name, string memory _symbol) external initializer {\\n\\t\\t__Ownable2Step_init();\\n\\t\\t__Pausable_init();\\n\\t\\t__ERC20_init(_name, _symbol);\\n\\t\\t__ERC20Permit_init(_name);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Unpauses the contract.\\n\\t * @notice This function can only be called by the contract owner.\\n\\t */\\n\\tfunction _open() external onlyOwner {\\n\\t\\t_unpause();\\n\\t}\\n\\n\\t/**\\n\\t * @dev Pauses the contract.\\n\\t * @notice This function can only be called by the pause guardian.\\n\\t */\\n\\tfunction _close() external onlyOwner {\\n\\t\\t_pause();\\n\\t}\\n\\n\\t/**\\n\\t * @dev Add a new account into the whitelist.\\n\\t */\\n\\tfunction _addWhitelist(address _account) external onlyOwner {\\n\\t\\t_addWhitelistInternal(_account);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Remove an exist account from the whitelist.\\n\\t */\\n\\tfunction _removeWhitelist(address _account) external onlyOwner {\\n\\t\\t_removeWhitelistInternal(_account);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets the lending parameters for the contract.\\n\\t * @param _iToken The iToken to be set for lending.\\n\\t * @notice Only the contract owner can call this function.\\n\\t */\\n\\tfunction _setLending(IiToken _iToken) external onlyOwner {\\n\\t\\trequire(_iToken.underlying() == address(this), \\\"_setLending: underlying address must be this contract\\\");\\n\\t\\t_setLendingInternal(_iToken);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Claims ETH and transfers it to the specified address.\\n\\t * @param _to The address to receive the ETH.\\n\\t * @param _ethAmount The amount of ETH to claim.\\n\\t * @notice Only addresses in the whitelist can call this function.\\n\\t */\\n\\tfunction claimETH(address _to, uint256 _ethAmount) external onlyWhitelist {\\n\\t\\t_to.functionCallWithValue(\\\"\\\", _ethAmount, \\\"claimETH: Transfer ETH reverted.\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev Hook that is called before any token transfer.\\n\\t * @param from The address where the tokens are transferred from.\\n\\t * @param to The address where the tokens are transferred to.\\n\\t * @param amount The amount of tokens being transferred.\\n\\t */\\n\\tfunction _beforeTokenTransfer(address from, address to, uint256 amount) internal override whenNotPaused {}\\n\\n\\t/**\\n\\t * @dev Returns the exchange rate of the asset.\\n\\t */\\n\\tfunction _exchangeRate() internal view override returns (uint256) {\\n\\t\\treturn IERC4626(address(ASSET)).convertToAssets(1 ether);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the total amount of assets consumed internally.\\n\\t */\\n\\tfunction _assetConsumedInternal() internal view override returns (uint256) {\\n\\t\\treturn totalSupply();\\n\\t}\\n\\n\\t/**\\n\\t * @dev Wraps ETH into assets and mints the corresponding amount of assets to the specified address.\\n\\t * @param _to The address to receive the minted assets.\\n\\t * @param _ethAmount The amount of ETH to wrap.\\n\\t * @return The amount of assets minted.\\n\\t */\\n\\tfunction _wrap(address _to, uint256 _ethAmount) internal returns (uint256) {\\n\\t\\tuint256 _amount = _calcOutputAsset(_ethAmount);\\n\\t\\trequire(_amount >= _assetQuotaInternal(), \\\"_wrap: insufficient asset quota\\\");\\n\\t\\t_mint(_to, _amount);\\n\\t\\treturn _amount;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Burns assets from the specified address and transfers them to another address.\\n\\t * @param _from The address to burn assets from.\\n\\t * @param _to The address to receive the assets.\\n\\t * @param _amount The amount of assets to burn and transfer.\\n\\t */\\n\\tfunction _unwrapToAsset(address _from, address _to, uint256 _amount) internal {\\n\\t\\t_burn(_from, _amount);\\n\\t\\tASSET.safeTransfer(_to, _amount);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Deposits tokens to the iToken contract by approving the transfer and minting the specified amount to the target address.\\n\\t * @param _to The address to receive the minted tokens.\\n\\t * @param _amount The amount of tokens to mint.\\n\\t */\\n\\tfunction _deposit(address _to, uint256 _amount) internal {\\n\\t\\t_approve(address(this), address(iToken_), _amount);\\n\\t\\tiToken_.mint(_to, _amount);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Wraps ETH into assets and returns the corresponding amount of assets to the sender.\\n\\t */\\n\\tfunction wrap() external payable returns (uint256) {\\n\\t\\treturn _wrap(msg.sender, msg.value);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Wraps ETH into assets and returns the corresponding amount of assets to the specified address.\\n\\t * @param _to The address to receive the wrapped assets.\\n\\t */\\n\\tfunction wrap(address _to) external payable returns (uint256) {\\n\\t\\treturn _wrap(_to, msg.value);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Wraps ETH into assets, mints the corresponding amount of assets to the contract, and deposits them to the sender.\\n\\t */\\n\\tfunction wrapAndDeposit() external payable returns (uint256 _amount) {\\n\\t\\t_amount = _wrap(address(this), msg.value);\\n\\t\\t_deposit(msg.sender, _amount);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Wraps ETH into assets, mints the corresponding amount of assets to the contract, and deposits them to the specified address.\\n\\t * @param _to The address to receive the minted assets.\\n\\t */\\n\\tfunction wrapAndDeposit(address _to) external payable returns (uint256 _amount) {\\n\\t\\t_amount = _wrap(address(this), msg.value);\\n\\t\\t_deposit(_to, _amount);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Unwraps assets to the specified amount and transfers them to the sender.\\n\\t * @param _amount The amount of assets to unwrap and transfer.\\n\\t */\\n\\tfunction unwrapToAsset(uint256 _amount) external {\\n\\t\\t_unwrapToAsset(msg.sender, msg.sender, _amount);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Unwraps assets to the specified amount and transfers them to the specified address.\\n\\t * @param _to The address to receive the unwrapped assets.\\n\\t * @param _amount The amount of assets to unwrap and transfer.\\n\\t */\\n\\tfunction unwrapToAsset(address _to, uint256 _amount) external {\\n\\t\\t_unwrapToAsset(msg.sender, _to, _amount);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Redeems underlying assets and unwraps them to the specified amount, transferring them to the sender.\\n\\t * @param _amount The amount of underlying assets to redeem and unwrap.\\n\\t */\\n\\tfunction withdrawUnderlyingAndUnwrapToAsset(uint256 _amount) external {\\n\\t\\tiToken_.redeemUnderlying(msg.sender, _amount);\\n\\t\\t_unwrapToAsset(address(this), msg.sender, _amount);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Redeems underlying assets and unwraps them to the specified amount, transferring them to the specified address.\\n\\t * @param _to The address to receive the unwrapped assets.\\n\\t * @param _amount The amount of underlying assets to redeem and unwrap.\\n\\t */\\n\\tfunction withdrawUnderlyingAndUnwrapToAsset(address _to, uint256 _amount) external {\\n\\t\\tiToken_.redeemUnderlying(msg.sender, _amount);\\n\\t\\t_unwrapToAsset(address(this), _to, _amount);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Redeems iToken assets and unwraps them to the corresponding amount, transferring them to the sender.\\n\\t * @param _iTokenAmount The amount of iToken assets to redeem and unwrap.\\n\\t */\\n\\tfunction withdrawAndUnwrapToAsset(uint256 _iTokenAmount) external {\\n\\t\\tuint256 _balance = balanceOf(address(this));\\n\\n\\t\\tiToken_.redeem(msg.sender, _iTokenAmount);\\n\\n\\t\\t_unwrapToAsset(address(this), msg.sender, balanceOf(address(this)) - _balance);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Redeems iToken assets and unwraps them to the corresponding amount, transferring them to the specified address.\\n\\t * @param _to The address to receive the unwrapped assets.\\n\\t * @param _iTokenAmount The amount of iToken assets to redeem and unwrap.\\n\\t */\\n\\tfunction withdrawAndUnwrapToAsset(address _to, uint256 _iTokenAmount) external {\\n\\t\\tuint256 _balance = balanceOf(address(this));\\n\\n\\t\\tiToken_.redeem(msg.sender, _iTokenAmount);\\n\\n\\t\\t_unwrapToAsset(address(this), _to, balanceOf(address(this)) - _balance);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Checks if the account is whitelisted.\\n\\t * @param _account The address to check.\\n\\t * @return True if the account is whitelisted, false otherwise.\\n\\t */\\n\\tfunction isWhitelist(address _account) public view override returns (bool) {\\n\\t\\treturn Whitelists.isWhitelist(_account) || _account == owner();\\n\\t}\\n}\\n\",\"keccak256\":\"0x44a74331f62c98bc9ed365cacbba3524ce410553a30200831fc6e65c1e0b6066\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620040bc380380620040bc833981016040819052620000349162000113565b6001600160a01b0381166080526200004b62000052565b5062000145565b600054610100900460ff1615620000bf5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161462000111576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6000602082840312156200012657600080fd5b81516001600160a01b03811681146200013e57600080fd5b9392505050565b608051613f3f6200017d600039600081816104bc01528181611a3901528181611df60152818161218e0152612b0f0152613f3f6000f3fe6080604052600436106103645760003560e01c806373c4b95a116101c6578063c683630d116100f7578063e817f7a211610095578063f81a5e751161006f578063f81a5e7514610964578063f9557ccb14610984578063fc49b62314610999578063fd3813ce146109b957600080fd5b8063e817f7a21461090f578063f2fde38b14610924578063f785c4811461094457600080fd5b8063d505accf116100d1578063d505accf1461086b578063dd62ed3e1461088b578063e30c3978146108d1578063e7aa3f2e146108ef57600080fd5b8063c683630d14610823578063cc64ecf214610843578063d46eb1191461086357600080fd5b80638605ff661161016457806395d89b411161013e57806395d89b41146107ae578063a457c2d7146107c3578063a9059cbb146107e3578063bb1370c51461080357600080fd5b80638605ff66146107665780638da5cb5b1461077b5780639057b67f1461079957600080fd5b80637ecebe00116101a05780637ecebe00146106e95780637f4e3076146107095780638398a7451461071e57806384b0196e1461073e57600080fd5b806373c4b95a146106945780637664c4b8146106b457806379ba5097146106d457600080fd5b80633ba0b9a9116102a057806357e8bb3c1161023e57806361ffe8581161021857806361ffe8581461061f5780636c0712691461063457806370a0823114610649578063715018a61461067f57600080fd5b806357e8bb3c146105d25780635c975abb146105e55780635e2d5fb5146105fd57600080fd5b8063408cfe241161027a578063408cfe241461055e578063468f02d21461057d57806349748a11146105925780634cd88b76146105b257600080fd5b80633ba0b9a9146105145780633c82a45a146105295780633f365fca1461054957600080fd5b806318160ddd1161030d578063313ce567116102e7578063313ce5671461047c5780633644e5151461049857806338d52e0f146104ad57806339509351146104f457600080fd5b806318160ddd1461043f57806323b872dd1461045457806328b564a01461047457600080fd5b80630b94de9c1161033e5780630b94de9c146103e85780630f149cce1461040a57806311c592191461041f57600080fd5b8063023276f01461037057806306fdde0314610396578063095ea7b3146103b857600080fd5b3661036b57005b600080fd5b61038361037e366004613941565b6109d9565b6040519081526020015b60405180910390f35b3480156103a257600080fd5b506103ab6109eb565b60405161038d91906139b6565b3480156103c457600080fd5b506103d86103d33660046139c9565b610a7d565b604051901515815260200161038d565b3480156103f457600080fd5b506104086104033660046139c9565b610a95565b005b34801561041657600080fd5b506103d8610b70565b34801561042b57600080fd5b5061040861043a3660046139c9565b610c72565b34801561044b57600080fd5b5060cb54610383565b34801561046057600080fd5b506103d861046f3660046139f5565b610c81565b610383610ca5565b34801561048857600080fd5b506040516012815260200161038d565b3480156104a457600080fd5b50610383610cc0565b3480156104b957600080fd5b507f00000000000000000000000000000000000000000000000000000000000000005b6040516001600160a01b03909116815260200161038d565b34801561050057600080fd5b506103d861050f3660046139c9565b610ccf565b34801561052057600080fd5b50610383610d0e565b34801561053557600080fd5b50610408610544366004613941565b610d18565b34801561055557600080fd5b50610383610e14565b34801561056a57600080fd5b50610164546001600160a01b03166104dc565b34801561058957600080fd5b50610383610e9c565b34801561059e57600080fd5b506104086105ad366004613a36565b610ea6565b3480156105be57600080fd5b506104086105cd366004613af2565b610eb1565b6103836105e0366004613941565b610fed565b3480156105f157600080fd5b5060975460ff166103d8565b34801561060957600080fd5b5061061261100a565b60405161038d9190613b56565b34801561062b57600080fd5b506103d8611017565b34801561064057600080fd5b50610408611118565b34801561065557600080fd5b50610383610664366004613941565b6001600160a01b0316600090815260c9602052604090205490565b34801561068b57600080fd5b5061040861112a565b3480156106a057600080fd5b506104086106af3660046139c9565b61113c565b3480156106c057600080fd5b506104086106cf366004613941565b6111ff565b3480156106e057600080fd5b50610408611210565b3480156106f557600080fd5b50610383610704366004613941565b61129b565b34801561071557600080fd5b506104086112ba565b34801561072a57600080fd5b50610383610739366004613a36565b6112ca565b34801561074a57600080fd5b506107536112d5565b60405161038d9796959493929190613b97565b34801561077257600080fd5b50610383611397565b34801561078757600080fd5b506033546001600160a01b03166104dc565b3480156107a557600080fd5b506103836115b5565b3480156107ba57600080fd5b506103ab6115bf565b3480156107cf57600080fd5b506103d86107de3660046139c9565b6115ce565b3480156107ef57600080fd5b506103d86107fe3660046139c9565b611678565b34801561080f57600080fd5b5061040861081e366004613a36565b611686565b34801561082f57600080fd5b506103d861083e366004613941565b61173a565b34801561084f57600080fd5b5061040861085e366004613941565b611760565b610383611771565b34801561087757600080fd5b50610408610886366004613c49565b61177d565b34801561089757600080fd5b506103836108a6366004613cc0565b6001600160a01b03918216600090815260ca6020908152604080832093909416825291909152205490565b3480156108dd57600080fd5b506065546001600160a01b03166104dc565b3480156108fb57600080fd5b5061040861090a3660046139c9565b6118e1565b34801561091b57600080fd5b5061038361196a565b34801561093057600080fd5b5061040861093f366004613941565b611974565b34801561095057600080fd5b5061038361095f366004613a36565b6119f2565b34801561097057600080fd5b5061038361097f366004613a36565b6119fd565b34801561099057600080fd5b50610383611a08565b3480156109a557600080fd5b506103836109b4366004613a36565b611a89565b3480156109c557600080fd5b506104086109d4366004613a36565b611a94565b60006109e58234611b1d565b92915050565b606060cc80546109fa90613cf9565b80601f0160208091040260200160405190810160405280929190818152602001828054610a2690613cf9565b8015610a735780601f10610a4857610100808354040283529160200191610a73565b820191906000526020600020905b815481529060010190602001808311610a5657829003601f168201915b5050505050905090565b600033610a8b818585611b93565b5060019392505050565b610a9e3361173a565b610b155760405162461bcd60e51b815260206004820152602d60248201527f6f6e6c7957686974656c6973743a2063616c6c6572206973206e6f7420696e2060448201527f7468652077686974656c6973740000000000000000000000000000000000000060648201526084015b60405180910390fd5b60408051602080820183526000825282518084019093528083527f636c61696d4554483a205472616e73666572204554482072657665727465642e90830152610b6b916001600160a01b03851691908490611ceb565b505050565b61016454604080517ff77c479100000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163f77c47919160048083019260209291908290030181865afa158015610bd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf89190613d2e565b61016454604051638e8f294b60e01b81526001600160a01b039182166004820152911690638e8f294b9060240160e060405180830381865afa158015610c42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c669190613d5b565b50909695505050505050565b610c7d338383611ddf565b5050565b600033610c8f858285611e1d565b610c9a858585611eaf565b506001949350505050565b6000610cb13034611b1d565b9050610cbd33826120ae565b90565b6000610cca61214b565b905090565b33600081815260ca602090815260408083206001600160a01b0387168452909152812054909190610a8b9082908690610d09908790613ddb565b611b93565b6000610cca612155565b610d206121c5565b306001600160a01b0316816001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8c9190613d2e565b6001600160a01b031614610e085760405162461bcd60e51b815260206004820152603560248201527f5f7365744c656e64696e673a20756e6465726c79696e6720616464726573732060448201527f6d757374206265207468697320636f6e747261637400000000000000000000006064820152608401610b0c565b610e118161221f565b50565b61016454604080517f3b1d21a200000000000000000000000000000000000000000000000000000000815290516000926001600160a01b031691633b1d21a29160048083019260209291908290030181865afa158015610e78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cca9190613df3565b6000610cca612323565b610e11333383611ddf565b600054610100900460ff1615808015610ed15750600054600160ff909116105b80610eeb5750303b158015610eeb575060005460ff166001145b610f5d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610b0c565b6000805460ff191660011790558015610f80576000805461ff0019166101001790555b610f88612511565b610f90612584565b610f9a83836125f7565b610fa38361266c565b8015610b6b576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b6000610ff93034611b1d565b905061100582826120ae565b919050565b6060610cca610162612716565b61016454604080517ff77c479100000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163f77c47919160048083019260209291908290030181865afa15801561107b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061109f9190613d2e565b61016454604051638e8f294b60e01b81526001600160a01b039182166004820152911690638e8f294b9060240160e060405180830381865afa1580156110e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110d9190613d5b565b509695505050505050565b6111206121c5565b611128612723565b565b6111326121c5565b611128600061277d565b30600090815260c96020526040812054610164546040517f1e9a6950000000000000000000000000000000000000000000000000000000008152336004820152602481018590529192506001600160a01b031690631e9a695090604401600060405180830381600087803b1580156111b357600080fd5b505af11580156111c7573d6000803e3d6000fd5b50505050610b6b3084836111f0306001600160a01b0316600090815260c9602052604090205490565b6111fa9190613e0c565b611ddf565b6112076121c5565b610e11816127a3565b60655433906001600160a01b031681146112925760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f74207468652060448201527f6e6577206f776e657200000000000000000000000000000000000000000000006064820152608401610b0c565b610e118161277d565b6001600160a01b038116600090815261012f60205260408120546109e5565b6112c26121c5565b611128612861565b60006109e58261289a565b60006060806000806000606060fb546000801b1480156112f5575060fc54155b6113415760405162461bcd60e51b815260206004820152601560248201527f4549503731323a20556e696e697469616c697a656400000000000000000000006044820152606401610b0c565b6113496128d3565b6113516128e2565b604080516000808252602082019092527f0f000000000000000000000000000000000000000000000000000000000000009b939a50919850469750309650945092509050565b60008061016460009054906101000a90046001600160a01b03166001600160a01b031663f77c47916040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114129190613d2e565b61016454604051638e8f294b60e01b81526001600160a01b039182166004820152911690638e8f294b9060240160e060405180830381865afa15801561145c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114809190613d5b565b50505093505050506000670de0b6b3a764000061016460009054906101000a90046001600160a01b03166001600160a01b031663bd6d894d6040518163ffffffff1660e01b81526004016020604051808303816000875af11580156114e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061150d9190613df3565b61016460009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611561573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115859190613df3565b61158f9190613e23565b6115999190613e42565b9050808211156115b0576115ad8183613e0c565b92505b505090565b6000610cca6128f1565b606060cd80546109fa90613cf9565b33600081815260ca602090815260408083206001600160a01b03871684529091528120549091908381101561166b5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152608401610b0c565b610c9a8286868403611b93565b600033610a8b818585611eaf565b30600090815260c96020526040812054610164546040517f1e9a6950000000000000000000000000000000000000000000000000000000008152336004820152602481018590529192506001600160a01b031690631e9a695090604401600060405180830381600087803b1580156116fd57600080fd5b505af1158015611711573d6000803e3d6000fd5b50505050610c7d3033836111f0306001600160a01b0316600090815260c9602052604090205490565b6000611745826128fc565b806109e55750506033546001600160a01b0391821691161490565b6117686121c5565b610e118161290a565b6000610cca3334611b1d565b834211156117cd5760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e650000006044820152606401610b0c565b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98888886117fc8c612a3d565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e001604051602081830303815290604052805190602001209050600061185782612a64565b9050600061186782878787612aac565b9050896001600160a01b0316816001600160a01b0316146118ca5760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e617475726500006044820152606401610b0c565b6118d58a8a8a611b93565b50505050505050505050565b610164546040517f96294178000000000000000000000000000000000000000000000000000000008152336004820152602481018390526001600160a01b0390911690639629417890604401600060405180830381600087803b15801561194757600080fd5b505af115801561195b573d6000803e3d6000fd5b50505050610c7d308383611ddf565b6000610cca612ad4565b61197c6121c5565b606580546001600160a01b03831673ffffffffffffffffffffffffffffffffffffffff1990911681179091556119ba6033546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b60006109e582612b86565b60006109e582612ba2565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a08231906024015b602060405180830381865afa158015610e78573d6000803e3d6000fd5b60006109e582612be1565b610164546040517f96294178000000000000000000000000000000000000000000000000000000008152336004820152602481018390526001600160a01b0390911690639629417890604401600060405180830381600087803b158015611afa57600080fd5b505af1158015611b0e573d6000803e3d6000fd5b50505050610e11303383611ddf565b600080611b2983612be1565b9050611b33612ad4565b811015611b825760405162461bcd60e51b815260206004820152601f60248201527f5f777261703a20696e73756666696369656e742061737365742071756f7461006044820152606401610b0c565b611b8c8482612bfe565b9392505050565b6001600160a01b038316611c0e5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610b0c565b6001600160a01b038216611c8a5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610b0c565b6001600160a01b03838116600081815260ca602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b606082471015611d635760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610b0c565b600080866001600160a01b03168587604051611d7f9190613e64565b60006040518083038185875af1925050503d8060008114611dbc576040519150601f19603f3d011682016040523d82523d6000602084013e611dc1565b606091505b5091509150611dd287838387612ccb565b925050505b949350505050565b611de98382612d41565b610b6b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168383612eb8565b6001600160a01b03838116600090815260ca60209081526040808320938616835292905220546000198114611ea95781811015611e9c5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610b0c565b611ea98484848403611b93565b50505050565b6001600160a01b038316611f2b5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610b0c565b6001600160a01b038216611fa75760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610b0c565b611fb2838383612f38565b6001600160a01b038316600090815260c96020526040902054818110156120415760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401610b0c565b6001600160a01b03808516600081815260c9602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906120a19086815260200190565b60405180910390a3611ea9565b610164546120c79030906001600160a01b031683611b93565b610164546040517f40c10f190000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015260248201849052909116906340c10f1990604401600060405180830381600087803b15801561212f57600080fd5b505af1158015612143573d6000803e3d6000fd5b505050505050565b6000610cca612f40565b6040517f07a2d13a000000000000000000000000000000000000000000000000000000008152670de0b6b3a764000060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906307a2d13a90602401611a6c565b6033546001600160a01b031633146111285760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b0c565b806001600160a01b031663621fd5076040518163ffffffff1660e01b8152600401602060405180830381865afa15801561225d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122819190613e80565b6122f35760405162461bcd60e51b815260206004820152602760248201527f5f7365744c656e64696e67496e7465726e616c3a205f69546f6b656e2069732060448201527f696e76616c6964000000000000000000000000000000000000000000000000006064820152608401610b0c565b610164805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600080600061016460009054906101000a90046001600160a01b03166001600160a01b031663f77c47916040518163ffffffff1660e01b8152600401602060405180830381865afa15801561237c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123a09190613d2e565b6001600160a01b0316632630c12f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156123dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124019190613d2e565b610164546040517fed5cf2dc0000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015291169063ed5cf2dc9060240160408051808303816000875af1158015612465573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124899190613e9b565b9150915060008211801561249a5750805b61250b5760405162461bcd60e51b8152602060048201526024808201527f676574556e6465726c79696e6750726963653a20707269636520697320696e7660448201527f616c6964000000000000000000000000000000000000000000000000000000006064820152608401610b0c565b50919050565b600054610100900460ff1661257c5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610b0c565b611128612fb4565b600054610100900460ff166125ef5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610b0c565b611128613028565b600054610100900460ff166126625760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610b0c565b610c7d828261309f565b600054610100900460ff166126d75760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610b0c565b610e11816040518060400160405280600181526020017f3100000000000000000000000000000000000000000000000000000000000000815250613131565b60606000611b8c836131d2565b61272b61322e565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586127603390565b6040516001600160a01b03909116815260200160405180910390a1565b6065805473ffffffffffffffffffffffffffffffffffffffff19169055610e1181613281565b6127af610162826132e0565b6128215760405162461bcd60e51b815260206004820152603360248201527f5f72656d6f766557686974656c697374496e7465726e616c3a205f6163636f7560448201527f6e7420686173206265656e2072656d6f766564000000000000000000000000006064820152608401610b0c565b6040516001600160a01b03821681527fde8cf212af7ce38b2840785a2768d97ff2dbf3c21b516961cec0061e134c2a1e906020015b60405180910390a150565b6128696132f5565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33612760565b6000670de0b6b3a76400006128ad612155565b6128b79084613e23565b6128c990670de0b6b3a763ffff613ddb565b6109e59190613e42565b606060fd80546109fa90613cf9565b606060fe80546109fa90613cf9565b6000610cca60cb5490565b60006109e561016283613347565b6001600160a01b0381166129865760405162461bcd60e51b815260206004820152603060248201527f5f61646457686974656c697374496e7465726e616c3a205f6163636f756e742060448201527f746865207a65726f2061646472657373000000000000000000000000000000006064820152608401610b0c565b61299261016282613369565b612a045760405162461bcd60e51b815260206004820152602e60248201527f5f61646457686974656c697374496e7465726e616c3a205f6163636f756e742060448201527f686173206265656e2061646465640000000000000000000000000000000000006064820152608401610b0c565b6040516001600160a01b03821681527f4790a4adb426ca2345bb5108f6e454eae852a7bf687544cd66a7270dff3a41d690602001612856565b6001600160a01b038116600090815261012f6020526040902080546001810182559061250b565b60006109e5612a7161214b565b836040517f19010000000000000000000000000000000000000000000000000000000000008152600281019290925260228201526042902090565b6000806000612abd8787878761337e565b91509150612aca81613442565b5095945050505050565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015612b56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b7a9190613df3565b905060006115996128f1565b6000612b90612155565b6128c983670de0b6b3a7640000613e23565b600080612bad612155565b905080612bbb600182613e0c565b612bcd85670de0b6b3a7640000613e23565b612bd79190613ddb565b611b8c9190613e42565b6000670de0b6b3a7640000612bf4612155565b6128c99084613e23565b6001600160a01b038216612c545760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610b0c565b612c6060008383612f38565b8060cb6000828254612c729190613ddb565b90915550506001600160a01b038216600081815260c960209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b60608315612d37578251612d30576001600160a01b0385163b612d305760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610b0c565b5081611dd7565b611dd783836135ab565b6001600160a01b038216612dbd5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610b0c565b612dc982600083612f38565b6001600160a01b038216600090815260c9602052604090205481811015612e585760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f63650000000000000000000000000000000000000000000000000000000000006064820152608401610b0c565b6001600160a01b038316600081815260c960209081526040808320868603905560cb80548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610b6b9084906135d5565b610b6b61322e565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f612f6b6136bd565b612f7361371a565b60408051602081019490945283019190915260608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b600054610100900460ff1661301f5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610b0c565b6111283361277d565b600054610100900460ff166130935760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610b0c565b6097805460ff19169055565b600054610100900460ff1661310a5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610b0c565b815161311d9060cc90602085019061389c565b508051610b6b9060cd90602084019061389c565b600054610100900460ff1661319c5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610b0c565b81516131af9060fd90602085019061389c565b5080516131c39060fe90602084019061389c565b5050600060fb81905560fc5550565b60608160000180548060200260200160405190810160405280929190818152602001828054801561322257602002820191906000526020600020905b81548152602001906001019080831161320e575b50505050509050919050565b60975460ff16156111285760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610b0c565b603380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000611b8c836001600160a01b03841661374b565b60975460ff166111285760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610b0c565b6001600160a01b03811660009081526001830160205260408120541515611b8c565b6000611b8c836001600160a01b03841661383e565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156133b55750600090506003613439565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015613409573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661343257600060019250925050613439565b9150600090505b94509492505050565b600081600481111561345657613456613ec7565b141561345f5750565b600181600481111561347357613473613ec7565b14156134c15760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610b0c565b60028160048111156134d5576134d5613ec7565b14156135235760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610b0c565b600381600481111561353757613537613ec7565b1415610e115760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610b0c565b8151156135bb5781518083602001fd5b8060405162461bcd60e51b8152600401610b0c91906139b6565b600061362a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661388d9092919063ffffffff16565b905080516000148061364b57508080602001905181019061364b9190613e80565b610b6b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610b0c565b6000806136c86128d3565b8051909150156136df578051602090910120919050565b60fb5480156136ee5792915050565b7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4709250505090565b5090565b6000806137256128e2565b80519091501561373c578051602090910120919050565b60fc5480156136ee5792915050565b6000818152600183016020526040812054801561383457600061376f600183613e0c565b855490915060009061378390600190613e0c565b90508181146137e85760008660000182815481106137a3576137a3613edd565b90600052602060002001549050808760000184815481106137c6576137c6613edd565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806137f9576137f9613ef3565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506109e5565b60009150506109e5565b6000818152600183016020526040812054613885575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556109e5565b5060006109e5565b6060611dd78484600085611ceb565b8280546138a890613cf9565b90600052602060002090601f0160209004810192826138ca5760008555613910565b82601f106138e357805160ff1916838001178555613910565b82800160010185558215613910579182015b828111156139105782518255916020019190600101906138f5565b506137169291505b808211156137165760008155600101613918565b6001600160a01b0381168114610e1157600080fd5b60006020828403121561395357600080fd5b8135611b8c8161392c565b60005b83811015613979578181015183820152602001613961565b83811115611ea95750506000910152565b600081518084526139a281602086016020860161395e565b601f01601f19169290920160200192915050565b602081526000611b8c602083018461398a565b600080604083850312156139dc57600080fd5b82356139e78161392c565b946020939093013593505050565b600080600060608486031215613a0a57600080fd5b8335613a158161392c565b92506020840135613a258161392c565b929592945050506040919091013590565b600060208284031215613a4857600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112613a7657600080fd5b813567ffffffffffffffff80821115613a9157613a91613a4f565b604051601f8301601f19908116603f01168101908282118183101715613ab957613ab9613a4f565b81604052838152866020858801011115613ad257600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060408385031215613b0557600080fd5b823567ffffffffffffffff80821115613b1d57600080fd5b613b2986838701613a65565b93506020850135915080821115613b3f57600080fd5b50613b4c85828601613a65565b9150509250929050565b6020808252825182820181905260009190848201906040850190845b81811015610c665783516001600160a01b031683529284019291840191600101613b72565b7fff00000000000000000000000000000000000000000000000000000000000000881681526000602060e081840152613bd360e084018a61398a565b8381036040850152613be5818a61398a565b606085018990526001600160a01b038816608086015260a0850187905284810360c0860152855180825283870192509083019060005b81811015613c3757835183529284019291840191600101613c1b565b50909c9b505050505050505050505050565b600080600080600080600060e0888a031215613c6457600080fd5b8735613c6f8161392c565b96506020880135613c7f8161392c565b95506040880135945060608801359350608088013560ff81168114613ca357600080fd5b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215613cd357600080fd5b8235613cde8161392c565b91506020830135613cee8161392c565b809150509250929050565b600181811c90821680613d0d57607f821691505b6020821081141561250b57634e487b7160e01b600052602260045260246000fd5b600060208284031215613d4057600080fd5b8151611b8c8161392c565b8051801515811461100557600080fd5b600080600080600080600060e0888a031215613d7657600080fd5b87519650602088015195506040880151945060608801519350613d9b60808901613d4b565b9250613da960a08901613d4b565b9150613db760c08901613d4b565b905092959891949750929550565b634e487b7160e01b600052601160045260246000fd5b60008219821115613dee57613dee613dc5565b500190565b600060208284031215613e0557600080fd5b5051919050565b600082821015613e1e57613e1e613dc5565b500390565b6000816000190483118215151615613e3d57613e3d613dc5565b500290565b600082613e5f57634e487b7160e01b600052601260045260246000fd5b500490565b60008251613e7681846020870161395e565b9190910192915050565b600060208284031215613e9257600080fd5b611b8c82613d4b565b60008060408385031215613eae57600080fd5b82519150613ebe60208401613d4b565b90509250929050565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fdfea26469706673582212204a1fe3758b9ce5234bef0cb30a5b9c68986deb97213a8663936eeba438a6816464736f6c634300080a0033",
  "deployedBytecode": "0x6080604052600436106103645760003560e01c806373c4b95a116101c6578063c683630d116100f7578063e817f7a211610095578063f81a5e751161006f578063f81a5e7514610964578063f9557ccb14610984578063fc49b62314610999578063fd3813ce146109b957600080fd5b8063e817f7a21461090f578063f2fde38b14610924578063f785c4811461094457600080fd5b8063d505accf116100d1578063d505accf1461086b578063dd62ed3e1461088b578063e30c3978146108d1578063e7aa3f2e146108ef57600080fd5b8063c683630d14610823578063cc64ecf214610843578063d46eb1191461086357600080fd5b80638605ff661161016457806395d89b411161013e57806395d89b41146107ae578063a457c2d7146107c3578063a9059cbb146107e3578063bb1370c51461080357600080fd5b80638605ff66146107665780638da5cb5b1461077b5780639057b67f1461079957600080fd5b80637ecebe00116101a05780637ecebe00146106e95780637f4e3076146107095780638398a7451461071e57806384b0196e1461073e57600080fd5b806373c4b95a146106945780637664c4b8146106b457806379ba5097146106d457600080fd5b80633ba0b9a9116102a057806357e8bb3c1161023e57806361ffe8581161021857806361ffe8581461061f5780636c0712691461063457806370a0823114610649578063715018a61461067f57600080fd5b806357e8bb3c146105d25780635c975abb146105e55780635e2d5fb5146105fd57600080fd5b8063408cfe241161027a578063408cfe241461055e578063468f02d21461057d57806349748a11146105925780634cd88b76146105b257600080fd5b80633ba0b9a9146105145780633c82a45a146105295780633f365fca1461054957600080fd5b806318160ddd1161030d578063313ce567116102e7578063313ce5671461047c5780633644e5151461049857806338d52e0f146104ad57806339509351146104f457600080fd5b806318160ddd1461043f57806323b872dd1461045457806328b564a01461047457600080fd5b80630b94de9c1161033e5780630b94de9c146103e85780630f149cce1461040a57806311c592191461041f57600080fd5b8063023276f01461037057806306fdde0314610396578063095ea7b3146103b857600080fd5b3661036b57005b600080fd5b61038361037e366004613941565b6109d9565b6040519081526020015b60405180910390f35b3480156103a257600080fd5b506103ab6109eb565b60405161038d91906139b6565b3480156103c457600080fd5b506103d86103d33660046139c9565b610a7d565b604051901515815260200161038d565b3480156103f457600080fd5b506104086104033660046139c9565b610a95565b005b34801561041657600080fd5b506103d8610b70565b34801561042b57600080fd5b5061040861043a3660046139c9565b610c72565b34801561044b57600080fd5b5060cb54610383565b34801561046057600080fd5b506103d861046f3660046139f5565b610c81565b610383610ca5565b34801561048857600080fd5b506040516012815260200161038d565b3480156104a457600080fd5b50610383610cc0565b3480156104b957600080fd5b507f00000000000000000000000000000000000000000000000000000000000000005b6040516001600160a01b03909116815260200161038d565b34801561050057600080fd5b506103d861050f3660046139c9565b610ccf565b34801561052057600080fd5b50610383610d0e565b34801561053557600080fd5b50610408610544366004613941565b610d18565b34801561055557600080fd5b50610383610e14565b34801561056a57600080fd5b50610164546001600160a01b03166104dc565b34801561058957600080fd5b50610383610e9c565b34801561059e57600080fd5b506104086105ad366004613a36565b610ea6565b3480156105be57600080fd5b506104086105cd366004613af2565b610eb1565b6103836105e0366004613941565b610fed565b3480156105f157600080fd5b5060975460ff166103d8565b34801561060957600080fd5b5061061261100a565b60405161038d9190613b56565b34801561062b57600080fd5b506103d8611017565b34801561064057600080fd5b50610408611118565b34801561065557600080fd5b50610383610664366004613941565b6001600160a01b0316600090815260c9602052604090205490565b34801561068b57600080fd5b5061040861112a565b3480156106a057600080fd5b506104086106af3660046139c9565b61113c565b3480156106c057600080fd5b506104086106cf366004613941565b6111ff565b3480156106e057600080fd5b50610408611210565b3480156106f557600080fd5b50610383610704366004613941565b61129b565b34801561071557600080fd5b506104086112ba565b34801561072a57600080fd5b50610383610739366004613a36565b6112ca565b34801561074a57600080fd5b506107536112d5565b60405161038d9796959493929190613b97565b34801561077257600080fd5b50610383611397565b34801561078757600080fd5b506033546001600160a01b03166104dc565b3480156107a557600080fd5b506103836115b5565b3480156107ba57600080fd5b506103ab6115bf565b3480156107cf57600080fd5b506103d86107de3660046139c9565b6115ce565b3480156107ef57600080fd5b506103d86107fe3660046139c9565b611678565b34801561080f57600080fd5b5061040861081e366004613a36565b611686565b34801561082f57600080fd5b506103d861083e366004613941565b61173a565b34801561084f57600080fd5b5061040861085e366004613941565b611760565b610383611771565b34801561087757600080fd5b50610408610886366004613c49565b61177d565b34801561089757600080fd5b506103836108a6366004613cc0565b6001600160a01b03918216600090815260ca6020908152604080832093909416825291909152205490565b3480156108dd57600080fd5b506065546001600160a01b03166104dc565b3480156108fb57600080fd5b5061040861090a3660046139c9565b6118e1565b34801561091b57600080fd5b5061038361196a565b34801561093057600080fd5b5061040861093f366004613941565b611974565b34801561095057600080fd5b5061038361095f366004613a36565b6119f2565b34801561097057600080fd5b5061038361097f366004613a36565b6119fd565b34801561099057600080fd5b50610383611a08565b3480156109a557600080fd5b506103836109b4366004613a36565b611a89565b3480156109c557600080fd5b506104086109d4366004613a36565b611a94565b60006109e58234611b1d565b92915050565b606060cc80546109fa90613cf9565b80601f0160208091040260200160405190810160405280929190818152602001828054610a2690613cf9565b8015610a735780601f10610a4857610100808354040283529160200191610a73565b820191906000526020600020905b815481529060010190602001808311610a5657829003601f168201915b5050505050905090565b600033610a8b818585611b93565b5060019392505050565b610a9e3361173a565b610b155760405162461bcd60e51b815260206004820152602d60248201527f6f6e6c7957686974656c6973743a2063616c6c6572206973206e6f7420696e2060448201527f7468652077686974656c6973740000000000000000000000000000000000000060648201526084015b60405180910390fd5b60408051602080820183526000825282518084019093528083527f636c61696d4554483a205472616e73666572204554482072657665727465642e90830152610b6b916001600160a01b03851691908490611ceb565b505050565b61016454604080517ff77c479100000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163f77c47919160048083019260209291908290030181865afa158015610bd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf89190613d2e565b61016454604051638e8f294b60e01b81526001600160a01b039182166004820152911690638e8f294b9060240160e060405180830381865afa158015610c42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c669190613d5b565b50909695505050505050565b610c7d338383611ddf565b5050565b600033610c8f858285611e1d565b610c9a858585611eaf565b506001949350505050565b6000610cb13034611b1d565b9050610cbd33826120ae565b90565b6000610cca61214b565b905090565b33600081815260ca602090815260408083206001600160a01b0387168452909152812054909190610a8b9082908690610d09908790613ddb565b611b93565b6000610cca612155565b610d206121c5565b306001600160a01b0316816001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8c9190613d2e565b6001600160a01b031614610e085760405162461bcd60e51b815260206004820152603560248201527f5f7365744c656e64696e673a20756e6465726c79696e6720616464726573732060448201527f6d757374206265207468697320636f6e747261637400000000000000000000006064820152608401610b0c565b610e118161221f565b50565b61016454604080517f3b1d21a200000000000000000000000000000000000000000000000000000000815290516000926001600160a01b031691633b1d21a29160048083019260209291908290030181865afa158015610e78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cca9190613df3565b6000610cca612323565b610e11333383611ddf565b600054610100900460ff1615808015610ed15750600054600160ff909116105b80610eeb5750303b158015610eeb575060005460ff166001145b610f5d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610b0c565b6000805460ff191660011790558015610f80576000805461ff0019166101001790555b610f88612511565b610f90612584565b610f9a83836125f7565b610fa38361266c565b8015610b6b576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b6000610ff93034611b1d565b905061100582826120ae565b919050565b6060610cca610162612716565b61016454604080517ff77c479100000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163f77c47919160048083019260209291908290030181865afa15801561107b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061109f9190613d2e565b61016454604051638e8f294b60e01b81526001600160a01b039182166004820152911690638e8f294b9060240160e060405180830381865afa1580156110e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110d9190613d5b565b509695505050505050565b6111206121c5565b611128612723565b565b6111326121c5565b611128600061277d565b30600090815260c96020526040812054610164546040517f1e9a6950000000000000000000000000000000000000000000000000000000008152336004820152602481018590529192506001600160a01b031690631e9a695090604401600060405180830381600087803b1580156111b357600080fd5b505af11580156111c7573d6000803e3d6000fd5b50505050610b6b3084836111f0306001600160a01b0316600090815260c9602052604090205490565b6111fa9190613e0c565b611ddf565b6112076121c5565b610e11816127a3565b60655433906001600160a01b031681146112925760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f74207468652060448201527f6e6577206f776e657200000000000000000000000000000000000000000000006064820152608401610b0c565b610e118161277d565b6001600160a01b038116600090815261012f60205260408120546109e5565b6112c26121c5565b611128612861565b60006109e58261289a565b60006060806000806000606060fb546000801b1480156112f5575060fc54155b6113415760405162461bcd60e51b815260206004820152601560248201527f4549503731323a20556e696e697469616c697a656400000000000000000000006044820152606401610b0c565b6113496128d3565b6113516128e2565b604080516000808252602082019092527f0f000000000000000000000000000000000000000000000000000000000000009b939a50919850469750309650945092509050565b60008061016460009054906101000a90046001600160a01b03166001600160a01b031663f77c47916040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114129190613d2e565b61016454604051638e8f294b60e01b81526001600160a01b039182166004820152911690638e8f294b9060240160e060405180830381865afa15801561145c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114809190613d5b565b50505093505050506000670de0b6b3a764000061016460009054906101000a90046001600160a01b03166001600160a01b031663bd6d894d6040518163ffffffff1660e01b81526004016020604051808303816000875af11580156114e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061150d9190613df3565b61016460009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611561573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115859190613df3565b61158f9190613e23565b6115999190613e42565b9050808211156115b0576115ad8183613e0c565b92505b505090565b6000610cca6128f1565b606060cd80546109fa90613cf9565b33600081815260ca602090815260408083206001600160a01b03871684529091528120549091908381101561166b5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152608401610b0c565b610c9a8286868403611b93565b600033610a8b818585611eaf565b30600090815260c96020526040812054610164546040517f1e9a6950000000000000000000000000000000000000000000000000000000008152336004820152602481018590529192506001600160a01b031690631e9a695090604401600060405180830381600087803b1580156116fd57600080fd5b505af1158015611711573d6000803e3d6000fd5b50505050610c7d3033836111f0306001600160a01b0316600090815260c9602052604090205490565b6000611745826128fc565b806109e55750506033546001600160a01b0391821691161490565b6117686121c5565b610e118161290a565b6000610cca3334611b1d565b834211156117cd5760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e650000006044820152606401610b0c565b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98888886117fc8c612a3d565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e001604051602081830303815290604052805190602001209050600061185782612a64565b9050600061186782878787612aac565b9050896001600160a01b0316816001600160a01b0316146118ca5760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e617475726500006044820152606401610b0c565b6118d58a8a8a611b93565b50505050505050505050565b610164546040517f96294178000000000000000000000000000000000000000000000000000000008152336004820152602481018390526001600160a01b0390911690639629417890604401600060405180830381600087803b15801561194757600080fd5b505af115801561195b573d6000803e3d6000fd5b50505050610c7d308383611ddf565b6000610cca612ad4565b61197c6121c5565b606580546001600160a01b03831673ffffffffffffffffffffffffffffffffffffffff1990911681179091556119ba6033546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b60006109e582612b86565b60006109e582612ba2565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a08231906024015b602060405180830381865afa158015610e78573d6000803e3d6000fd5b60006109e582612be1565b610164546040517f96294178000000000000000000000000000000000000000000000000000000008152336004820152602481018390526001600160a01b0390911690639629417890604401600060405180830381600087803b158015611afa57600080fd5b505af1158015611b0e573d6000803e3d6000fd5b50505050610e11303383611ddf565b600080611b2983612be1565b9050611b33612ad4565b811015611b825760405162461bcd60e51b815260206004820152601f60248201527f5f777261703a20696e73756666696369656e742061737365742071756f7461006044820152606401610b0c565b611b8c8482612bfe565b9392505050565b6001600160a01b038316611c0e5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610b0c565b6001600160a01b038216611c8a5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610b0c565b6001600160a01b03838116600081815260ca602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b606082471015611d635760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610b0c565b600080866001600160a01b03168587604051611d7f9190613e64565b60006040518083038185875af1925050503d8060008114611dbc576040519150601f19603f3d011682016040523d82523d6000602084013e611dc1565b606091505b5091509150611dd287838387612ccb565b925050505b949350505050565b611de98382612d41565b610b6b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168383612eb8565b6001600160a01b03838116600090815260ca60209081526040808320938616835292905220546000198114611ea95781811015611e9c5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610b0c565b611ea98484848403611b93565b50505050565b6001600160a01b038316611f2b5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610b0c565b6001600160a01b038216611fa75760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610b0c565b611fb2838383612f38565b6001600160a01b038316600090815260c96020526040902054818110156120415760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401610b0c565b6001600160a01b03808516600081815260c9602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906120a19086815260200190565b60405180910390a3611ea9565b610164546120c79030906001600160a01b031683611b93565b610164546040517f40c10f190000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015260248201849052909116906340c10f1990604401600060405180830381600087803b15801561212f57600080fd5b505af1158015612143573d6000803e3d6000fd5b505050505050565b6000610cca612f40565b6040517f07a2d13a000000000000000000000000000000000000000000000000000000008152670de0b6b3a764000060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906307a2d13a90602401611a6c565b6033546001600160a01b031633146111285760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b0c565b806001600160a01b031663621fd5076040518163ffffffff1660e01b8152600401602060405180830381865afa15801561225d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122819190613e80565b6122f35760405162461bcd60e51b815260206004820152602760248201527f5f7365744c656e64696e67496e7465726e616c3a205f69546f6b656e2069732060448201527f696e76616c6964000000000000000000000000000000000000000000000000006064820152608401610b0c565b610164805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600080600061016460009054906101000a90046001600160a01b03166001600160a01b031663f77c47916040518163ffffffff1660e01b8152600401602060405180830381865afa15801561237c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123a09190613d2e565b6001600160a01b0316632630c12f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156123dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124019190613d2e565b610164546040517fed5cf2dc0000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015291169063ed5cf2dc9060240160408051808303816000875af1158015612465573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124899190613e9b565b9150915060008211801561249a5750805b61250b5760405162461bcd60e51b8152602060048201526024808201527f676574556e6465726c79696e6750726963653a20707269636520697320696e7660448201527f616c6964000000000000000000000000000000000000000000000000000000006064820152608401610b0c565b50919050565b600054610100900460ff1661257c5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610b0c565b611128612fb4565b600054610100900460ff166125ef5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610b0c565b611128613028565b600054610100900460ff166126625760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610b0c565b610c7d828261309f565b600054610100900460ff166126d75760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610b0c565b610e11816040518060400160405280600181526020017f3100000000000000000000000000000000000000000000000000000000000000815250613131565b60606000611b8c836131d2565b61272b61322e565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586127603390565b6040516001600160a01b03909116815260200160405180910390a1565b6065805473ffffffffffffffffffffffffffffffffffffffff19169055610e1181613281565b6127af610162826132e0565b6128215760405162461bcd60e51b815260206004820152603360248201527f5f72656d6f766557686974656c697374496e7465726e616c3a205f6163636f7560448201527f6e7420686173206265656e2072656d6f766564000000000000000000000000006064820152608401610b0c565b6040516001600160a01b03821681527fde8cf212af7ce38b2840785a2768d97ff2dbf3c21b516961cec0061e134c2a1e906020015b60405180910390a150565b6128696132f5565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33612760565b6000670de0b6b3a76400006128ad612155565b6128b79084613e23565b6128c990670de0b6b3a763ffff613ddb565b6109e59190613e42565b606060fd80546109fa90613cf9565b606060fe80546109fa90613cf9565b6000610cca60cb5490565b60006109e561016283613347565b6001600160a01b0381166129865760405162461bcd60e51b815260206004820152603060248201527f5f61646457686974656c697374496e7465726e616c3a205f6163636f756e742060448201527f746865207a65726f2061646472657373000000000000000000000000000000006064820152608401610b0c565b61299261016282613369565b612a045760405162461bcd60e51b815260206004820152602e60248201527f5f61646457686974656c697374496e7465726e616c3a205f6163636f756e742060448201527f686173206265656e2061646465640000000000000000000000000000000000006064820152608401610b0c565b6040516001600160a01b03821681527f4790a4adb426ca2345bb5108f6e454eae852a7bf687544cd66a7270dff3a41d690602001612856565b6001600160a01b038116600090815261012f6020526040902080546001810182559061250b565b60006109e5612a7161214b565b836040517f19010000000000000000000000000000000000000000000000000000000000008152600281019290925260228201526042902090565b6000806000612abd8787878761337e565b91509150612aca81613442565b5095945050505050565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015612b56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b7a9190613df3565b905060006115996128f1565b6000612b90612155565b6128c983670de0b6b3a7640000613e23565b600080612bad612155565b905080612bbb600182613e0c565b612bcd85670de0b6b3a7640000613e23565b612bd79190613ddb565b611b8c9190613e42565b6000670de0b6b3a7640000612bf4612155565b6128c99084613e23565b6001600160a01b038216612c545760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610b0c565b612c6060008383612f38565b8060cb6000828254612c729190613ddb565b90915550506001600160a01b038216600081815260c960209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b60608315612d37578251612d30576001600160a01b0385163b612d305760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610b0c565b5081611dd7565b611dd783836135ab565b6001600160a01b038216612dbd5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610b0c565b612dc982600083612f38565b6001600160a01b038216600090815260c9602052604090205481811015612e585760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f63650000000000000000000000000000000000000000000000000000000000006064820152608401610b0c565b6001600160a01b038316600081815260c960209081526040808320868603905560cb80548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610b6b9084906135d5565b610b6b61322e565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f612f6b6136bd565b612f7361371a565b60408051602081019490945283019190915260608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b600054610100900460ff1661301f5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610b0c565b6111283361277d565b600054610100900460ff166130935760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610b0c565b6097805460ff19169055565b600054610100900460ff1661310a5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610b0c565b815161311d9060cc90602085019061389c565b508051610b6b9060cd90602084019061389c565b600054610100900460ff1661319c5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610b0c565b81516131af9060fd90602085019061389c565b5080516131c39060fe90602084019061389c565b5050600060fb81905560fc5550565b60608160000180548060200260200160405190810160405280929190818152602001828054801561322257602002820191906000526020600020905b81548152602001906001019080831161320e575b50505050509050919050565b60975460ff16156111285760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610b0c565b603380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000611b8c836001600160a01b03841661374b565b60975460ff166111285760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610b0c565b6001600160a01b03811660009081526001830160205260408120541515611b8c565b6000611b8c836001600160a01b03841661383e565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156133b55750600090506003613439565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015613409573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661343257600060019250925050613439565b9150600090505b94509492505050565b600081600481111561345657613456613ec7565b141561345f5750565b600181600481111561347357613473613ec7565b14156134c15760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610b0c565b60028160048111156134d5576134d5613ec7565b14156135235760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610b0c565b600381600481111561353757613537613ec7565b1415610e115760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610b0c565b8151156135bb5781518083602001fd5b8060405162461bcd60e51b8152600401610b0c91906139b6565b600061362a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661388d9092919063ffffffff16565b905080516000148061364b57508080602001905181019061364b9190613e80565b610b6b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610b0c565b6000806136c86128d3565b8051909150156136df578051602090910120919050565b60fb5480156136ee5792915050565b7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4709250505090565b5090565b6000806137256128e2565b80519091501561373c578051602090910120919050565b60fc5480156136ee5792915050565b6000818152600183016020526040812054801561383457600061376f600183613e0c565b855490915060009061378390600190613e0c565b90508181146137e85760008660000182815481106137a3576137a3613edd565b90600052602060002001549050808760000184815481106137c6576137c6613edd565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806137f9576137f9613ef3565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506109e5565b60009150506109e5565b6000818152600183016020526040812054613885575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556109e5565b5060006109e5565b6060611dd78484600085611ceb565b8280546138a890613cf9565b90600052602060002090601f0160209004810192826138ca5760008555613910565b82601f106138e357805160ff1916838001178555613910565b82800160010185558215613910579182015b828111156139105782518255916020019190600101906138f5565b506137169291505b808211156137165760008155600101613918565b6001600160a01b0381168114610e1157600080fd5b60006020828403121561395357600080fd5b8135611b8c8161392c565b60005b83811015613979578181015183820152602001613961565b83811115611ea95750506000910152565b600081518084526139a281602086016020860161395e565b601f01601f19169290920160200192915050565b602081526000611b8c602083018461398a565b600080604083850312156139dc57600080fd5b82356139e78161392c565b946020939093013593505050565b600080600060608486031215613a0a57600080fd5b8335613a158161392c565b92506020840135613a258161392c565b929592945050506040919091013590565b600060208284031215613a4857600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112613a7657600080fd5b813567ffffffffffffffff80821115613a9157613a91613a4f565b604051601f8301601f19908116603f01168101908282118183101715613ab957613ab9613a4f565b81604052838152866020858801011115613ad257600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060408385031215613b0557600080fd5b823567ffffffffffffffff80821115613b1d57600080fd5b613b2986838701613a65565b93506020850135915080821115613b3f57600080fd5b50613b4c85828601613a65565b9150509250929050565b6020808252825182820181905260009190848201906040850190845b81811015610c665783516001600160a01b031683529284019291840191600101613b72565b7fff00000000000000000000000000000000000000000000000000000000000000881681526000602060e081840152613bd360e084018a61398a565b8381036040850152613be5818a61398a565b606085018990526001600160a01b038816608086015260a0850187905284810360c0860152855180825283870192509083019060005b81811015613c3757835183529284019291840191600101613c1b565b50909c9b505050505050505050505050565b600080600080600080600060e0888a031215613c6457600080fd5b8735613c6f8161392c565b96506020880135613c7f8161392c565b95506040880135945060608801359350608088013560ff81168114613ca357600080fd5b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215613cd357600080fd5b8235613cde8161392c565b91506020830135613cee8161392c565b809150509250929050565b600181811c90821680613d0d57607f821691505b6020821081141561250b57634e487b7160e01b600052602260045260246000fd5b600060208284031215613d4057600080fd5b8151611b8c8161392c565b8051801515811461100557600080fd5b600080600080600080600060e0888a031215613d7657600080fd5b87519650602088015195506040880151945060608801519350613d9b60808901613d4b565b9250613da960a08901613d4b565b9150613db760c08901613d4b565b905092959891949750929550565b634e487b7160e01b600052601160045260246000fd5b60008219821115613dee57613dee613dc5565b500190565b600060208284031215613e0557600080fd5b5051919050565b600082821015613e1e57613e1e613dc5565b500390565b6000816000190483118215151615613e3d57613e3d613dc5565b500290565b600082613e5f57634e487b7160e01b600052601260045260246000fd5b500490565b60008251613e7681846020870161395e565b9190910192915050565b600060208284031215613e9257600080fd5b611b8c82613d4b565b60008060408385031215613eae57600080fd5b82519150613ebe60208401613d4b565b90509250929050565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fdfea26469706673582212204a1fe3758b9ce5234bef0cb30a5b9c68986deb97213a8663936eeba438a6816464736f6c634300080a0033",
  "devdoc": {
    "author": "dForce engineer",
    "details": "Contains the main logic for ssvETH token functionality.",
    "kind": "dev",
    "methods": {
      "DOMAIN_SEPARATOR()": {
        "details": "See {IERC20Permit-DOMAIN_SEPARATOR}."
      },
      "_addWhitelist(address)": {
        "details": "Add a new account into the whitelist."
      },
      "_close()": {
        "details": "Pauses the contract."
      },
      "_open()": {
        "details": "Unpauses the contract."
      },
      "_removeWhitelist(address)": {
        "details": "Remove an exist account from the whitelist."
      },
      "_setLending(address)": {
        "details": "Sets the lending parameters for the contract.",
        "params": {
          "_iToken": "The iToken to be set for lending."
        }
      },
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "asset()": {
        "details": "External function to retrieve the asset token address.",
        "returns": {
          "_0": "The asset token address."
        }
      },
      "assetConsumed()": {
        "details": "External function to retrieve the amount of asset consumed.",
        "returns": {
          "_0": "The amount of asset consumed."
        }
      },
      "assetQuota()": {
        "details": "External function to retrieve the remaining asset quota available for consumption.",
        "returns": {
          "_0": "_assetQuota The remaining asset quota."
        }
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "claimETH(address,uint256)": {
        "details": "Claims ETH and transfers it to the specified address.",
        "params": {
          "_ethAmount": "The amount of ETH to claim.",
          "_to": "The address to receive the ETH."
        }
      },
      "constructor": {
        "details": "Constructor function for ssvETH token.",
        "params": {
          "_asset": "The underlying asset for the ssvETH token."
        }
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "depositStatus()": {
        "details": "Returns the deposit status of the pool."
      },
      "eip712Domain()": {
        "details": "See {EIP-5267}. _Available since v4.9._"
      },
      "exchangeRate()": {
        "details": "External function to retrieve the exchange rate between asset and Ether.",
        "returns": {
          "_0": "The current exchange rate."
        }
      },
      "getIutputAsset(uint256)": {
        "details": "External function to get the amount of asset to input based on the given Ether amount.",
        "params": {
          "_ethAmount": "The amount of Ether to convert to asset."
        },
        "returns": {
          "_assetAmount": "The calculated amount of asset to input."
        }
      },
      "getIutputEth(uint256)": {
        "details": "External function to get the amount of Ether to input based on the given asset amount.",
        "params": {
          "_assetAmount": "The amount of the asset to convert to Ether."
        },
        "returns": {
          "_ethAmount": "The calculated amount of Ether to input."
        }
      },
      "getOutputAsset(uint256)": {
        "details": "External function to get the amount of asset to output based on the given Ether amount.",
        "params": {
          "_ethAmount": "The amount of Ether to convert to asset."
        },
        "returns": {
          "_assetAmount": "The calculated amount of asset to output."
        }
      },
      "getOutputEth(uint256)": {
        "details": "External function to get the amount of Ether to output based on the given asset amount.",
        "params": {
          "_assetAmount": "The amount of the asset to convert from Ether."
        },
        "returns": {
          "_ethAmount": "The calculated amount of Ether to output."
        }
      },
      "iToken()": {
        "details": "Returns the underlying asset of the pool."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "initialize(string,string)": {
        "details": "Initializes the contract with required initializations for Ownable, Pausable, ERC20, and ERC20 Permit."
      },
      "isWhitelist(address)": {
        "details": "Checks if the account is whitelisted.",
        "params": {
          "_account": "The address to check."
        },
        "returns": {
          "_0": "True if the account is whitelisted, false otherwise."
        }
      },
      "lendingCash()": {
        "details": "Returns the available cash (liquidity) in the pool.",
        "returns": {
          "_0": "The amount of available cash in the pool."
        }
      },
      "limitOfDeposit()": {
        "details": "Returns the remaining deposit limit of the pool."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "nonces(address)": {
        "details": "See {IERC20Permit-nonces}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "See {IERC20Permit-permit}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalAsset()": {
        "details": "External function to retrieve the total amount of the asset held by the contract.",
        "returns": {
          "_0": "The total amount of the asset held by the contract."
        }
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      },
      "unwrapToAsset(address,uint256)": {
        "details": "Unwraps assets to the specified amount and transfers them to the specified address.",
        "params": {
          "_amount": "The amount of assets to unwrap and transfer.",
          "_to": "The address to receive the unwrapped assets."
        }
      },
      "unwrapToAsset(uint256)": {
        "details": "Unwraps assets to the specified amount and transfers them to the sender.",
        "params": {
          "_amount": "The amount of assets to unwrap and transfer."
        }
      },
      "whitelists()": {
        "returns": {
          "_whitelists": "The list of account addresses"
        }
      },
      "withdrawAndUnwrapToAsset(address,uint256)": {
        "details": "Redeems iToken assets and unwraps them to the corresponding amount, transferring them to the specified address.",
        "params": {
          "_iTokenAmount": "The amount of iToken assets to redeem and unwrap.",
          "_to": "The address to receive the unwrapped assets."
        }
      },
      "withdrawAndUnwrapToAsset(uint256)": {
        "details": "Redeems iToken assets and unwraps them to the corresponding amount, transferring them to the sender.",
        "params": {
          "_iTokenAmount": "The amount of iToken assets to redeem and unwrap."
        }
      },
      "withdrawStatus()": {
        "details": "Returns the withdraw status of the pool."
      },
      "withdrawUnderlyingAndUnwrapToAsset(address,uint256)": {
        "details": "Redeems underlying assets and unwraps them to the specified amount, transferring them to the specified address.",
        "params": {
          "_amount": "The amount of underlying assets to redeem and unwrap.",
          "_to": "The address to receive the unwrapped assets."
        }
      },
      "withdrawUnderlyingAndUnwrapToAsset(uint256)": {
        "details": "Redeems underlying assets and unwraps them to the specified amount, transferring them to the sender.",
        "params": {
          "_amount": "The amount of underlying assets to redeem and unwrap."
        }
      },
      "wrap()": {
        "details": "Wraps ETH into assets and returns the corresponding amount of assets to the sender."
      },
      "wrap(address)": {
        "details": "Wraps ETH into assets and returns the corresponding amount of assets to the specified address.",
        "params": {
          "_to": "The address to receive the wrapped assets."
        }
      },
      "wrapAndDeposit()": {
        "details": "Wraps ETH into assets, mints the corresponding amount of assets to the contract, and deposits them to the sender."
      },
      "wrapAndDeposit(address)": {
        "details": "Wraps ETH into assets, mints the corresponding amount of assets to the contract, and deposits them to the specified address.",
        "params": {
          "_to": "The address to receive the minted assets."
        }
      }
    },
    "title": "ssvETH",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "_close()": {
        "notice": "This function can only be called by the pause guardian."
      },
      "_open()": {
        "notice": "This function can only be called by the contract owner."
      },
      "_setLending(address)": {
        "notice": "Only the contract owner can call this function."
      },
      "claimETH(address,uint256)": {
        "notice": "Only addresses in the whitelist can call this function."
      },
      "initialize(string,string)": {
        "notice": "Initializes the ssvETH token with the provided name and symbol."
      },
      "whitelists()": {
        "notice": "Return all whitelists"
      }
    },
    "notice": "Implements functionality for ssvETH token.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 269,
        "contract": "src/ssvETH.sol:ssvETH",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 272,
        "contract": "src/ssvETH.sol:ssvETH",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1871,
        "contract": "src/ssvETH.sol:ssvETH",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 116,
        "contract": "src/ssvETH.sol:ssvETH",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 236,
        "contract": "src/ssvETH.sol:ssvETH",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 25,
        "contract": "src/ssvETH.sol:ssvETH",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 104,
        "contract": "src/ssvETH.sol:ssvETH",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 452,
        "contract": "src/ssvETH.sol:ssvETH",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 557,
        "contract": "src/ssvETH.sol:ssvETH",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 577,
        "contract": "src/ssvETH.sol:ssvETH",
        "label": "_balances",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 583,
        "contract": "src/ssvETH.sol:ssvETH",
        "label": "_allowances",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 585,
        "contract": "src/ssvETH.sol:ssvETH",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "203",
        "type": "t_uint256"
      },
      {
        "astId": 587,
        "contract": "src/ssvETH.sol:ssvETH",
        "label": "_name",
        "offset": 0,
        "slot": "204",
        "type": "t_string_storage"
      },
      {
        "astId": 589,
        "contract": "src/ssvETH.sol:ssvETH",
        "label": "_symbol",
        "offset": 0,
        "slot": "205",
        "type": "t_string_storage"
      },
      {
        "astId": 1169,
        "contract": "src/ssvETH.sol:ssvETH",
        "label": "__gap",
        "offset": 0,
        "slot": "206",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 2559,
        "contract": "src/ssvETH.sol:ssvETH",
        "label": "_hashedName",
        "offset": 0,
        "slot": "251",
        "type": "t_bytes32"
      },
      {
        "astId": 2562,
        "contract": "src/ssvETH.sol:ssvETH",
        "label": "_hashedVersion",
        "offset": 0,
        "slot": "252",
        "type": "t_bytes32"
      },
      {
        "astId": 2564,
        "contract": "src/ssvETH.sol:ssvETH",
        "label": "_name",
        "offset": 0,
        "slot": "253",
        "type": "t_string_storage"
      },
      {
        "astId": 2566,
        "contract": "src/ssvETH.sol:ssvETH",
        "label": "_version",
        "offset": 0,
        "slot": "254",
        "type": "t_string_storage"
      },
      {
        "astId": 2824,
        "contract": "src/ssvETH.sol:ssvETH",
        "label": "__gap",
        "offset": 0,
        "slot": "255",
        "type": "t_array(t_uint256)48_storage"
      },
      {
        "astId": 1274,
        "contract": "src/ssvETH.sol:ssvETH",
        "label": "_nonces",
        "offset": 0,
        "slot": "303",
        "type": "t_mapping(t_address,t_struct(Counter)1878_storage)"
      },
      {
        "astId": 1282,
        "contract": "src/ssvETH.sol:ssvETH",
        "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
        "offset": 0,
        "slot": "304",
        "type": "t_bytes32"
      },
      {
        "astId": 1438,
        "contract": "src/ssvETH.sol:ssvETH",
        "label": "__gap",
        "offset": 0,
        "slot": "305",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5607,
        "contract": "src/ssvETH.sol:ssvETH",
        "label": "whitelists_",
        "offset": 0,
        "slot": "354",
        "type": "t_struct(AddressSet)5135_storage"
      },
      {
        "astId": 5986,
        "contract": "src/ssvETH.sol:ssvETH",
        "label": "iToken_",
        "offset": 0,
        "slot": "356",
        "type": "t_contract(IiToken)5533"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)48_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[48]",
        "numberOfBytes": "1536"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IiToken)5533": {
        "encoding": "inplace",
        "label": "contract IiToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Counter)1878_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CountersUpgradeable.Counter)",
        "numberOfBytes": "32",
        "value": "t_struct(Counter)1878_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)5135_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 5134,
            "contract": "src/ssvETH.sol:ssvETH",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)4820_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Counter)1878_storage": {
        "encoding": "inplace",
        "label": "struct CountersUpgradeable.Counter",
        "members": [
          {
            "astId": 1877,
            "contract": "src/ssvETH.sol:ssvETH",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Set)4820_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 4815,
            "contract": "src/ssvETH.sol:ssvETH",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 4819,
            "contract": "src/ssvETH.sol:ssvETH",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}